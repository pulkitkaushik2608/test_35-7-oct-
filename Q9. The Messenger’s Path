#include <iostream>
#include <vector>
#include <queue>
using namespace std;

bool canReach(vector<vector<int>>& grid) {
    int n = grid.size(), m = grid[0].size();
    if(grid[0][0]==1 || grid[n-1][m-1]==1) return false;
    
    vector<vector<bool>> visited(n, vector<bool>(m, false));
    queue<pair<int,int>> q;
    q.push({0,0});
    visited[0][0] = true;
    
    int dx[] = {0,0,1,-1};
    int dy[] = {1,-1,0,0};
    
    while(!q.empty()) {
        auto [x,y] = q.front(); q.pop();
        if(x==n-1 && y==m-1) return true;
        for(int i=0;i<4;i++) {
            int nx = x + dx[i], ny = y + dy[i];
            if(nx>=0 && nx<n && ny>=0 && ny<m && grid[nx][ny]==0 && !visited[nx][ny]) {
                visited[nx][ny] = true;
                q.push({nx,ny});
            }
        }
    }
    return false;
}

int main() {
    int n,m;
    cin >> n >> m;
    vector<vector<int>> grid(n, vector<int>(m));
    for(int i=0;i<n;i++)
        for(int j=0;j<m;j++)
            cin >> grid[i][j];
    
    cout << (canReach(grid) ? "true" : "false");
    return 0;
}
