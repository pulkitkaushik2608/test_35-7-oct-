#include <iostream>
#include <vector>
using namespace std;

void dfs(vector<vector<int>>& grid, int i, int j) {
    int n = grid.size(), m = grid[0].size();
    if(i<0 || i>=n || j<0 || j>=m || grid[i][j]==0) return;
    grid[i][j] = 0; // mark visited
    int dx[] = {-1,-1,-1,0,0,1,1,1};
    int dy[] = {-1,0,1,-1,1,-1,0,1};
    for(int k=0;k<8;k++) dfs(grid,i+dx[k],j+dy[k]);
}

int main() {
    int n,m;
    cin >> n >> m;
    vector<vector<int>> grid(n, vector<int>(m));
    for(int i=0;i<n;i++)
        for(int j=0;j<m;j++)
            cin >> grid[i][j];

    int ponds = 0;
    for(int i=0;i<n;i++) {
        for(int j=0;j<m;j++) {
            if(grid[i][j]==1) {
                dfs(grid,i,j);
                ponds++;
            }
        }
    }

    cout << ponds;
    return 0;
}
